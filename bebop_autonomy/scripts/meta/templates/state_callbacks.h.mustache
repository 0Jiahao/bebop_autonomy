#ifndef {{project}}_STATE_CALLBACKS_H
#define {{project}}_STATE_CALLBACKS_H

/*
 * {{project}}_state_callbacks.h
 * auto-generated from {{url}}
 * Date: {{date}}
 * Generator: {{generator}} @ {{generator_git_hash}}
 * Do not modify this file by hand. Check scripts/meta folder for generator files.
 */

extern "C"
{
  #include "libARSAL/ARSAL.h"
  #include "libARController/ARController.h"
}

#include "bebop_autonomy/autogenerated/callbacks_common.h"

{{#cpp_class}}
#include "bebop_autonomy_msgs/{{cpp_class_msg_type}}.h"
{{/cpp_class}}

namespace bebop_autonomy
{
namespace cb
{

{{#cpp_class}}

// {{cpp_class_comment}}
class {{cpp_class_name}} : public AbstractState
{
private:
  ::bebop_autonomy_msgs::{{cpp_class_msg_type}}::Ptr msg_ptr;

public:

  {{cpp_class_name}}(::ros::NodeHandle& nh, const ::std::string& topic)
    : AbstractState({{key}})
  {
    ros::NodeHandle priv_nh("~");
    if (priv_nh.getParam("{{cpp_class_param_name}}", pub_enabled_) && pub_enabled_)
    {
      ARSAL_PRINT(ARSAL_PRINT_INFO, "CB" , "[STATES] Enabling %s", topic.c_str());
      ros_pub_ = nh.advertise<bebop_autonomy_msgs::{{cpp_class_msg_type}}>(topic, {{queue_size}}, {{latched}});
    } // pub_enabled_ is false
  }

  ::bebop_autonomy_msgs::{{cpp_class_msg_type}}::ConstPtr GetDataCstPtr() const
  {
    ::boost::lock_guard<boost::mutex> lock(mutex_);
    return msg_ptr;
  }

  void Update(const ARCONTROLLER_DICTIONARY_ARG_t *arguments, const ::ros::Time& t)
  {
    if (arguments == NULL)
    {
      ARSAL_PRINT(ARSAL_PRINT_WARNING, "CB", "{{cpp_class_name}}::Update() arguments is NULL");
      return;
    }

    ::boost::lock_guard<boost::mutex> lock(mutex_);
    msg_ptr.reset(new ::bebop_autonomy_msgs::{{cpp_class_msg_type}}());
    msg_ptr->header.stamp = t;
    msg_ptr->header.frame_id = "{{frame_id}}";

{{#cpp_class_arg}}

    arg = NULL;
    HASH_FIND_STR (arguments, {{cpp_class_arg_key}}, arg);
    if (arg)
    {
      msg_ptr->{{cpp_class_arg_name}} = arg->value.{{cpp_class_arg_sdk_type}};
    }
{{/cpp_class_arg}}

    if (pub_enabled_) ros_pub_.publish(msg_ptr);
  }

};  // {{cpp_class_name}}

{{/cpp_class}}

}  // namespace cb
}  // namespace bebop_autonomy
#endif  // {{project}}_STATE_CALLBACKS_H