#!/usr/bin/env python

# bebop_ardrone3.cfg
# auto-generated from https://raw.githubusercontent.com/Parrot-Developers/libARCommands/7e2f55fafcd45ba2380ca2574a08b7359c005f47/Xml/ARDrone3_commands.xml
# Date: 2015-09-02
# Generator: generate.py @ 6ca12b4
# Do not modify this file by hand. Check scripts/meta folder for generator files.

PACKAGE = "bebop_autonomy"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# Piloting Settings commands
# Set Max Altitude
gen.add("PilotingSettingsMaxAltitudeCurrent", double_t, 0, "Current altitude max in m", 0, 0, 100)
# Set Max Tilt
gen.add("PilotingSettingsMaxTiltCurrent", double_t, 0, "Current tilt max in degree", 0, -180.0, 180.0)
# [NOT USED] Enable/Disable absolut control
gen.add("PilotingSettingsAbsolutControlOn", int_t, 0, "1 to enable, 0 to disable", 0, 0, 1)
# Set the distance max of the drone
gen.add("PilotingSettingsMaxDistanceValue", double_t, 0, "Current max distance in meter", 0, 0, 100)
# Indication about how the product handle flying over the max distance limitation
gen.add("PilotingSettingsNoFlyOverMaxDistanceShouldnotflyover", int_t, 0, "1 if the drone can't fly further than max distance, 0 if no limitation on the drone should be done", 0, 0, 1)

# Speed Settings commands
# Set Max Vertical speed
gen.add("SpeedSettingsMaxVerticalSpeedCurrent", double_t, 0, "Current max vertical speed in m/s", 0, 0.0, 10.0)
# Set Max Rotation speed
gen.add("SpeedSettingsMaxRotationSpeedCurrent", double_t, 0, "Current max rotation speed in degree/s", 0, 0, 900.0)
# Presence of hull protection
gen.add("SpeedSettingsHullProtectionPresent", int_t, 0, "1 if present, 0 if not present", 0, 0, 1)
# Outdoor property
gen.add("SpeedSettingsOutdoorOutdoor", int_t, 0, "1 if outdoor flight, 0 if indoor flight", 0, 0, 1)

# Network settings commands
# Auto-select channel of choosen band
NetworkSettingsWifiSelectionType_enum = gen.enum([
    gen.const("NetworkSettingsWifiSelectionType_auto", int_t, 0, "Auto selection"),
    gen.const("NetworkSettingsWifiSelectionType_manual", int_t, 1, "Manual selection"),
], "The type of wifi selection (auto, manual)")
gen.add("NetworkSettingsWifiSelectionType", int_t, 0, "The type of wifi selection (auto, manual)", 0, 0, 1, edit_method=NetworkSettingsWifiSelectionType_enum)
NetworkSettingsWifiSelectionBand_enum = gen.enum([
    gen.const("NetworkSettingsWifiSelectionBand_2_4ghz", int_t, 0, "2.4 GHz band"),
    gen.const("NetworkSettingsWifiSelectionBand_5ghz", int_t, 1, "5 GHz band"),
    gen.const("NetworkSettingsWifiSelectionBand_all", int_t, 2, "Both 2.4 and 5 GHz bands"),
], "The allowed band(s) : 2.4 Ghz, 5 Ghz, or all")
gen.add("NetworkSettingsWifiSelectionBand", int_t, 0, "The allowed band(s) : 2.4 Ghz, 5 Ghz, or all", 0, 0, 2, edit_method=NetworkSettingsWifiSelectionBand_enum)
gen.add("NetworkSettingsWifiSelectionChannel", int_t, 0, "The channel (not used in auto mode)", 0, 0, 50)

# Settings commands

# Photo settings chosen by the user

# GPS settings
# Set user preference for the type of the home position. Note that this is only a preference
GPSSettingsHomeTypeType_enum = gen.enum([
    gen.const("GPSSettingsHomeTypeType_TAKEOFF", int_t, 0, "The drone will try to return to the take off position"),
    gen.const("GPSSettingsHomeTypeType_PILOT", int_t, 1, "The drone will try to return to the pilot position"),
], "The type of the home position")
gen.add("GPSSettingsHomeTypeType", int_t, 0, "The type of the home position", 0, 0, 1, edit_method=GPSSettingsHomeTypeType_enum)
# Set the delay after which the drone will automatically try to return home
gen.add("GPSSettingsReturnHomeDelayDelay", int_t, 0, "Delay in second", 0, 0, 120)


exit(gen.generate(PACKAGE, "bebop_autonomy_nodelet", "BebopArdrone3"))